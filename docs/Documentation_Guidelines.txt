This file provides guidelines for developers on how to update the documentation. The content of the file will be added to the developers' document later. If you have any questions about this file or HPAT documentation please contact Rujal Desai.
How to update the documentation

HPAT documentation is built using Sphinx. Building the documentation is not part of HPAT build as of now(that may change later). So you have to follow few extra steps to build new documentation. 

Sphinx uses RST files to generate html/pdf output. Therefore the new documentation should either be in RST file or standardized docstring(provided with the function/class definition inside source code). 

There are two ways to contribute to the documentation:
1. Add documentation for a Pandas API overloaded in HPAT
2. Add/Change content of one of the section of the existing documentation

Pandas API Documentation

If you have implemented a Pandas function/operator in HPAT follow these steps to add it to the new documentation:

1. Write a docstring inside the function/operator definition and make sure it is in the standardized format that HPAT follows

   If you are not aware of the standardized format of docstring refer to pandas.Series.append method in hpat/datatypes/hpat_series_functions.py . Also, make sure the function definition has all the arguments included in it even though HPAt doesn't support that argument. For example, Pandas Series.ne(not equal) method has the following signature:
   
   Series.ne(self, other, level=None, fill_value=None, axis=0)
   
   HPAT doesn't support 'level' , 'fill_value' and 'axis' but the function definition in HPAT should looik like this:
   
   new_funcname(self, other, level=None, fill_value=None, axis=0)
   where new_funcname : function name given by developer 
   
2. Edit the script rename_function.py

   This step is part of a work around. Hence it is specific to HPAT. Sphinx uses autodoc to automatically generate documentation from a function docstring. However, if we use that directly the function name displayed in User's Guide for HPAT will be the function name that developer has used to overload Pandas API instead of the actual name of that Pandas API that is overloaded. For example,
   
   Pandas.Series.append method is overloaded in HPAT by this function definition:
   
   @overload_method(SeriesType, 'append')
   def hpat_pandas_series_append(self, to_append, ignore_index=False, verify_integrity=False)
   
   But we cannot display 'hpat_pandas_series_append' in 'Supported Pandas API' section of USer's Guide. rename_function.py script fixes this. But the developer is responsible to give required information to the script so that the display name can be the one that we want. Follow the steps mentioned in rename_function.py file.
   
3. Edit the respective RST file or create a new one

   Find out if the RST file for your method already exists in hpat/docs/usersource . As of now RST file for pandas series is already created but any other Pandas API that does not belong to series is required to be added in a new RST file. For example, If you have implemented Pandas GroupBy method then create a new RST file called "groupby.rst" . If you're not sure how to create a new RST file or what to add in this file refer to series.rst . Add the function name(the one that should be displayed) in this RST file and add this new filename in apireference.rst . 
   
4. Build the documentation

   Go to hpat/docs. Use following commands to build the User's documentation:
   
   make clean   
   make html
   
   For developer's documentation:
   
   make clean
   make developerhtml

Add/Change the existing Documentation
If you want to add a new section or modify content of an existing section, make sure the content is in RST format. If you have created a new RST file then add the filename in either hpat/docs/usersource/index.rst or hpat/docs/devsource/index.rst . Then build the user's documentation using following commands:

cd hpat/docs
make clean
make html

For developer's documentation:

cd hpat/docs
make clean
make developerhtml